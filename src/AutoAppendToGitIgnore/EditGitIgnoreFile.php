<?php namespace Weaves81\AutoAppendToGitIgnore;

class EditGitIgnoreFile
{
    /**
     * Git comment marking the start of auto generated lines
     * @var string
     */
    private $startMarker =
        "# START Do not modify the lines between here and #END, they will be regenerated by AutoAppendToGitIgnore";

    /**
     * Git comment marking the end of auto generated lines
     * @var string
     */
    private $endMarker = "# END of AutoAppendToGitIgnore";

    /**
     * Full path to the target .gitignore path
     * @var string
     */
    private $filePath = ".gitignore";

    /**
     * Array containing all lines in the current .gitignore file
     * @var array
     */
    private $readLines = array();

    /**
     * Total number of lines in the current .gitignore file
     * @var int
     */
    private $numLines = 0;

    /**
     * Index of $readLines where $starMarker was found
     * @var int
     */
    private $startIndex = 0;

    /**
     * Index of $readLines where $endMarker was found
     * @var int
     */
    private $endIndex = 0;

    /**
     * All lines found in $readLines before $startMarker
     * @var array
     */
    private $beforeLines = array();

    /**
     * All lines found in $readLines before between $startMarker and $endMarker
     * @var array
     */
    private $autoLines = array();

    /**
     * All lines found in $readLines after $endMaker
     * @var array
     */
    private $afterLines = array();

    public function __construct($ignoreFilePath = ".gitignore")
    {
        $this->filePath = $ignoreFilePath . "/.gitignore";
        $this->checkGitIgnorePermissions();
        $this->parse();
    }

    /**
     * Set the lines to appear between the makers
     *
     * @param array $lines
     *
     * @return $this
     * @throws AutoGitIgnoreInvalidParameterException
     */
    public function createGitIgnoreLines(Array $lines)
    {
        $this->checkDataIsAnArray($lines);

        $lines = $this->addStartLineToArray($lines);

        $lines = $this->addEndLineToArray($lines);

        $this->autoLines = $lines;

        return $this;
    }

    /**
     * @return $this
     * @throws AutoGitIgnorePermissionException
     * @throws AutoGitIgnoreSaveFailedException
     */
    public function save()
    {
        if (count($this->readLines)) {

            $this->checkGitIgnorePermissions();

            $this->mergeGitIgnoreFileArrays();

            $this->saveFile();
        }

        return $this;
    }

    /**
     * Prints debug info
     * @return self
     */
    public function debug()
    {
        echo "filePath    = " . $this->filePath . PHP_EOL;
        echo "startMarker = " . $this->startMarker . PHP_EOL;
        echo "endMarker   = " . $this->endMarker . PHP_EOL;
        echo "startIndex  = " . $this->startIndex . PHP_EOL;
        echo "endIndex    = " . $this->endIndex . PHP_EOL;
        echo "numLines    = " . $this->numLines . PHP_EOL;
        echo "Start       = " . print_r($this->beforeLines, true);
        echo "Auto        = " . print_r($this->autoLines, true);
        echo "End         = " . print_r($this->afterLines, true);

        return $this;
    }

    /**
     * @throws AutoGitIgnorePermissionException
     * @return self
     */
    private function checkGitIgnorePermissions()
    {
        if (! file_exists($this->filePath)) {
            if (! is_writable(dirname($this->filePath))) {
                throw new AutoGitIgnorePermissionException(
                    "Do not have permission to create " . $this->filePath .
                    ". .gitignore does not exist, and unable to create it"
                );
            }
            touch($this->filePath);
        } elseif (! is_writable($this->filePath)) {
            throw new AutoGitIgnorePermissionException("Do not have permission to edit " . $this->filePath . ".");
        }

        return $this;
    }

    /**
     * Loads the current .gitignore and parses it.
     * Overwrites/resets any unsaved changes
     * @throws AutoGitIgnoreParseException
     * @return self
     */
    private function parse()
    {
        $this->readLines = $this->readFileContents();

        $this->checkFileMarkersAreSetCorrectly();

        $this->getNumberOfLines();

        $this->trimToAutoAppendedContent();

        $this->autoLines = $this->getAutoAppendedLines();

        if (empty($this->autoLines)) {
            $this->setMarkersForEmptyFile();
        }

        return $this;
    }

    /**
     * @param $lines
     *
     * @throws AutoGitIgnoreInvalidParameterException
     */
    private function checkDataIsAnArray($lines)
    {
        if (! is_array($lines)) {
            throw new AutoGitIgnoreInvalidParameterException("$lines must be an array. Each value is one line");
        }
    }

    /**
     * @return mixed
     */
    private function addStartLineToArray($lines)
    {
        if (current($lines) !== $this->startMarker) {
            array_unshift($lines, $this->startMarker);

            return $lines;
        }

        return $lines;
    }

    /**
     * @param $lines
     *
     * @return array
     */
    private function addEndLineToArray($lines)
    {
        if (end($lines) !== $this->endMarker) {
            $lines[] = $this->endMarker;

            return $lines;
        }

        return $lines;
    }

    private function mergeGitIgnoreFileArrays()
    {
        $this->readLines = array_merge($this->beforeLines, $this->autoLines, $this->afterLines);
    }

    /**
     * @throws AutoGitIgnoreSaveFailedException
     */
    private function saveFile()
    {
        if (! file_put_contents($this->filePath, implode(PHP_EOL, $this->readLines))) {
            throw new AutoGitIgnoreSaveFailedException("Saving to " . $this->filePath . " failed");
        }
    }

    /**
     * @return array
     */
    private function readFileContents()
    {
        return file($this->filePath, FILE_IGNORE_NEW_LINES);
    }

    /**
     * @throws AutoGitIgnoreParseException
     */
    private function checkFileMarkersAreSetCorrectly()
    {
        if ($this->isStartMarkerWithoutEndMaker()) {
            throw new AutoGitIgnoreParseException(
                "Found start marker on line " . ($this->findStartIndex() + 1) .
                " without an end marker. Please manually edit " . $this->filePath
            );
        } elseif ($this->isEndMarkerWithoutStartMarker()) {
            throw new AutoGitIgnoreParseException(
                "Found end marker on line " . ($this->findEndIndex() + 1) .
                " without a start marker. Please manually edit " . $this->filePath
            );
        }

        $this->startIndex = $this->findStartIndex();
        $this->endIndex   = $this->findEndIndex();

        if ($this->endIndex < $this->startIndex) {
            throw new AutoGitIgnoreParseException(
                "End marker found on line " . ($this->endIndex + 1) . " before start maker on line " .
                ($this->startIndex + 1) . ". Please manually edit " . $this->filePath
            );
        }
    }

    private function getNumberOfLines()
    {
        $this->numLines = count($this->readLines);
    }

    private function trimToAutoAppendedContent()
    {
        if ($this->startIndex === false) {
            $this->startIndex = $this->numLines + 1;
        }

        if ($this->startIndex != 0) {
            $this->beforeLines = array_slice($this->readLines, 0, $this->startIndex);
        }

        if ($this->endIndex === false) {
            $this->endIndex = $this->numLines - 1;
        }

        if ($this->endIndex !== $this->numLines - 1) {
            $this->afterLines = array_slice($this->readLines, $this->endIndex + 1, $this->numLines);
        }
    }

    /**
     * @return array
     */
    private function getAutoAppendedLines()
    {
        return array_slice($this->readLines, $this->startIndex, $this->endIndex);
    }

    private function setMarkersForEmptyFile()
    {
        if ($this->startIndex !== 0 && ! empty($this->readLines[$this->endIndex])) {
            $this->autoLines[] = PHP_EOL;
        }
        $this->autoLines[] = $this->startMarker;
        $this->autoLines[] = $this->endMarker;
    }

    /**
     * @return bool
     */
    private function isStartMarkerWithoutEndMaker()
    {
        return in_array($this->startMarker, $this->readLines) && ! in_array($this->endMarker, $this->readLines);
    }

    /**
     * @return bool
     */
    private function isEndMarkerWithoutStartMarker()
    {
        return in_array($this->endMarker, $this->readLines) && ! in_array($this->startMarker, $this->readLines);
    }

    /**
     * Find the index in the readLines array containing the start marker
     * @return int
     */
    private function findStartIndex()
    {
        return $this->findLine($this->startMarker);
    }

    /**
     * Find the index in the readLines array containing the end marker
     * @return int
     */
    private function findEndIndex()
    {
        return $this->findLine($this->endMarker);
    }

    /**
     * Find the index in the readLines array containing the value of $line
     *
     * @param string $line the line to search for
     *
     * @return int
     */
    private function findLine($line)
    {
        return array_search($line, $this->readLines);
    }
}
